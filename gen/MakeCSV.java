import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Random;

/**
 * @author Dolf ten Have
 * @date 15/04/2025
 *
 *       This program is designed to create lines of CSV data. This is done
 *       based on the table generated by parseArgs.
 *       It's aim is to do this isn a performant manner.
 */

public class MakeCSV {

	// private static final String usage = "usage: java MakeCSV <n-lines>
	// <path/to/table/file> <output name>";
	private static final int MIN_YEAR = 1925; // 100 years for now
	private static final int seqVarcharValue = 7;
	private static final String charSet[] = { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O",
			"P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j",
			"k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
	private static final String hexSet[] = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E",
			"F" };
	private static final int COMMA_VALUE = 10;
	private static final String bools[] = { "True", "False" };
	private static final String sexes[] = { "F", "M" };
	private static final String PHONE_PRIFIX[] = { "+61", "+64", "021", "022", "027", "021", "026", "029" };
	private static final String hours[] = { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11",
			"12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" };

	private static int length;
	private static String outputFileName;
	private static String csvHeader; // Descrives the column names
	private static final int GEN_TABLE_WIDTH = 3;
	private static int genTable[][]; // The generation table
	private static csvFile files[]; // An array that contains all buffered readers that link to external files
	private static int seqVarchar[][];
	private static int level = 10;

	private static BufferedWriter out;
	private static int row; // The index of the genTable row that the program is currently on

	private static Random rand;

	/**
	 * @param args [0] number of lines to generate; [1] path to the gen table; [2]
	 *             optional. Name of the output file
	 */
	public static void main(String args[]) {
		try {
			length = Integer.parseInt(args[0]);
		} catch (Exception e) {
			System.out.println("'" + args[0] + "' is not a valid length.");
			System.exit(1);
		}

		if (args.length > 2) {
			outputFileName = args[2];
		} else {
			System.err.println("Please supply an output name for your file");
			System.exit(1);
		}

		initializeGenTable(args[1]);
		makeCSV();
		System.out.println("MakeCSV: data written too '" + outputFileName + ".csv'");
	}

	/**
	 * Reads and initialises all componenets of the gen and files arrays
	 * 
	 * @param tablePath the path to the genTable file
	 */
	private static void initializeGenTable(String tablePath) {
		BufferedReader readTable;
		String in[];
		int seqVarcharCount = 0;
		ArrayList<Integer> cols;
		try {
			readTable = new BufferedReader(new FileReader(tablePath));

			// Reads the file head initialisesing the gen table arrays
			in = readTable.readLine().split(" ");
			genTable = new int[(Integer.parseInt(in[0]) * 2) - 1][GEN_TABLE_WIDTH];
			files = new csvFile[Integer.parseInt((in[1]))];
			seqVarchar = new int[Integer.parseInt(in[2])][Integer.parseInt(in[3])];

			csvHeader = readTable.readLine();

			readTable.readLine();

			// Reads all the file data
			for (int n = 0; n < files.length; n++) {
				in = readTable.readLine().split(",");
				cols = new ArrayList<Integer>();
				for (int i = 2; i < in.length; i++) {
					cols.add(Integer.parseInt(in[i]));
				}
				int[] csvCols = new int[cols.size()];
				for (int x = 0; x < csvCols.length; x++) {
					csvCols[x] = cols.get(x);
				}
				files[n] = new csvFile(in[0], csvCols);
			}

			readTable.readLine();

			// Reads the rest of the file into the genTable array
			for (int i = 0; i < genTable.length; i++) {
				if ((i % 2) == 0) {
					in = readTable.readLine().split(" ");
					genTable[i][0] = Integer.parseInt(in[0]);
					if (in.length > 1) {
						// If this is a file line, initialise a new reader and add it to the readed
						// array. Adding the index of the reader within that array to the gentable array
						if (genTable[i][0] == seqVarcharValue) {
							genTable[i][2] = Integer.parseInt(in[1]);
							genTable[i][1] = seqVarcharCount;
							seqVarcharCount++;
						} else {
							for (int j = 1; j < in.length; j++) {
								genTable[i][j] = Integer.parseInt(in[j]);
							}
						}
					}
				} else {
					genTable[i][0] = COMMA_VALUE;
				}
			}
			readTable.close();
		} catch (Exception e) {
			e.printStackTrace(System.err);
			System.exit(1);
		}
	}

	private static void updateBar() {
		System.out.println("MakeCSV: " + level + "% (" + ((length / 10) * level) + " lines).");
		level += 10;
	}

	/**
	 * Prints the content of the genTable array.
	 *
	 * This is used for the purposes of debugging and not in the final project
	 */
	private static void printArray() {
		for (int i = 0; i < genTable.length; i++) {
			for (int j = 0; j < genTable[0].length; j++) {
				System.out.print(genTable[i][j]);
				System.out.print(" ");
			}
			System.out.println("");
		}
	}

	/**
	 **
	 * Closes all external files that are still Open
	 *
	 * private static void closeFiles() {
	 * try {
	 * if (seqFiles != null) {
	 * for (int i = 0; i < seqFiles.length; i++) {
	 * seqFiles[i].close();
	 * }
	 * }
	 * } catch (Exception e) {
	 * e.printStackTrace(System.err);
	 * }
	 * 
	 * }
	 */
	/**
	 * This method will create the csv file, one line at a time and write it out to
	 * the file
	 */
	private static void makeCSV() {
		rand = new Random();
		try {
			out = new BufferedWriter(new FileWriter(outputFileName + ".csv"));

			write(csvHeader);
			out.newLine();
			out.flush();

			int progress = length / 10;
			int total = progress;

			for (int i = 0; i < length - 1; i++) {
				if (i == progress) {
					progress = progress + total;
					updateBar();
				}
				writeLine();
				out.newLine();
			}
			writeLine();
			out.close();

		} catch (Exception e) {
			e.printStackTrace(System.err);
			System.exit(1);
		}
	}

	/**
	 * This method sends the next item in the genTable to the right method for
	 * generating that data type
	 */
	private static void writeLine() {
		for (int j = 0; j < genTable.length; j++) {

			row = j;
			switch (genTable[j][0]) {
				case 0:
					varchar(rand.nextInt(1, genTable[j][1] + 1));
					break;
				case 1:
					int_(genTable[j][1]);
					break;
				case 2:
					date();
					break;
				case 3:
					time();
					break;
				case 4:
					file();
					break;
				case 5:
					double_();
					break;
				case 6:
					seqInt();
					break;
				case 7:
					seqVarchar();
					break;
				case 8:
					seqFile();
					break;
				case 9:
					timestamp();
					break;
				case 10:
					comma();
					break;
				case 11:
					hex();
					break;
				case 12:
					email();
					break;
				case 13:
					bool();
					break;
				case 14:
					sex();
					break;
				case 15:
					phone();
					break;
				case 16:
					feedInterval();
					break;
				case 17:
					_null();
					break;
				case 18:
					emptyStr();
					break;
				default:
					System.err.println("Uknown data type'" + genTable[j][0] + "'");
					System.exit(1);
					break;
			}
		}
	}

	/**
	 * Writes out the given data to the csv file
	 */
	private static void write(String s) {
		try {
			out.write(s, 0, s.length());
			out.flush();
		} catch (Exception e) {
			e.printStackTrace(System.err);
			System.exit(1);
		}

	}

	/**
	 * Writes aphabetical letters to the file of of a length between 1 and length
	 * 
	 * @param length the maximum length of the random String
	 */
	private static void varchar(int length) {
		for (int i = 0; i < length; i++) {
			write(charSet[rand.nextInt(charSet.length)]);
		}
	}

	/**
	 * Writes a random integer between 0 and the max Length
	 * 
	 * @param maxSize the maximum length of the integer
	 */
	private static void int_(int maxSize) {
		write(getRandomInt(1, maxSize));
	}

	/**
	 * Writes a random date
	 */
	private static void date() {
		write(rand.nextInt(MIN_YEAR, 2025) + "-" + rand.nextInt(1, 13) + "-" + rand.nextInt(1, 29));
	}

	/**
	 * Writes a random time value in the format HH:MM:SS
	 */
	private static void time() {
		write(hours[rand.nextInt(hours.length)] + ":" + rand.nextInt(6) + rand.nextInt(10) + ":"
				+ rand.nextInt(6) + rand.nextInt(10));
	}

	/**
	 * reades data from a random line in a file that is then written out to a
	 * specific column in that file
	 */
	private static void file() {
		write(files[genTable[row][1]].getRandomLine(genTable[row][2]));
	}

	/**
	 * writes arandom double
	 */
	private static void double_() {
		write(getRandomInt(1, genTable[row][1]) + "." + getRandomInt(1, genTable[row][2]));
		// System.out.println(genTable[row][1] + ":" + genTable[row][2]);
	}

	/**
	 * writes the current value of the int in the genTable and then increases the
	 * count
	 */
	private static void seqInt() {
		write(String.valueOf(genTable[row][1]));
		genTable[row][1]++;
	}

	/**
	 * Writes a sequential string of varchar characters of a fixed length
	 */
	private static void seqVarchar() {
		int p = genTable[row][1];
		for (int i = 0; i < seqVarchar[0].length; i++) {
			write(charSet[seqVarchar[p][i] % 52]);
		}
		
		//attempt to increase thenext character
		increaseChar(p, genTable[row][2] -1);
	}

	private static void increaseChar(int p, int i){
		//If the last item in the list is reached, call the first item instead.
		if(i < 0)
			increaseChar(p, genTable[row][2] - 1);

		//Increase the count of the current item
		seqVarchar[p][i]++;

		//If the character is back to the start character but it has been incremented before
		//Increase the next character
		if(seqVarchar[p][i] % charSet.length == 0 && seqVarchar[p][i] > 0){
			increaseChar(p,i-1);
		}
	}

	/**
	 * Will requentially read from another a column in another file until the end is
	 * reached. At that point it will start from the top again
	 */
	private static void seqFile() {
		write(files[genTable[row][1]].getNextLine(genTable[row][2]));
	}

	/**
	 * Writes a timestamp in the format 'YYYY:MM-DD HH:MM:SS'
	 */
	private static void timestamp() {
		date();
		write(" ");
		time();
	}

	/**
	 * Write a comma value
	 */
	private static void comma() {
		write(",");
	}

	/**
	 * Writes a random hex value of the specified length
	 */
	private static void hex() {
		for (int i = 0; i < (genTable[row][1]); i++) {
			write(hexSet[rand.nextInt(hexSet.length)]);
		}
	}

	/**
	 * Creates a psuedo email address that validates the requirements for a valid
	 * email but will most likely not exist
	 */
	private static void email() {
		varchar(rand.nextInt(1, 40));
		write("@");
		varchar(rand.nextInt(1, 40));
		write(".");
		varchar(rand.nextInt(2, 4));
	}

	/**
	 * Writes a random boolean valriable 0 or 1.
	 */
	private static void bool() {
		write(bools[rand.nextInt(bools.length)]);
	}

	/**
	 * Writes a random sex char from sexes
	 */
	private static void sex() {
		write(sexes[rand.nextInt(sexes.length)]);
	}

	/**
	 * Writes a random predifined phone prefix from PHONE_PREFIX followed by 7 random numbers between 1 and 9.
	 */
	private static void phone() {
		write(PHONE_PRIFIX[rand.nextInt(PHONE_PRIFIX.length)]);
		write(getRandomInt(10, 10));
	}

	/**
	 * Prints a number between 1 and hour.length.
	 */
	private static void feedInterval(){
		write(hours[rand.nextInt(1, hours.length)]);
	}

	/**
	 * Prints the keyword 'null'.
	 */
	private static void _null(){
		write("null");
	}

	/**
	 * Prints an empty string.
	 */
	private static void emptyStr(){
		write("");
	}
	/**
	 * Returns a random Integer integer between 1 and length digits long
	 * 
	 * @param minLength the minimum length of the digits the int may contain
	 *                  (inclusive)
	 * @param length    the maximum number of digits the int may contain (inclusive)
	 * @return A stirng that that represents an integer of a random length between 1
	 *         and length
	 */
	private static String getRandomInt(int minLength, int maxLength) {
		int return_length = rand.nextInt(minLength, maxLength + 1);
		String _int = "";
		//Ensures that there is at least one value above 1
		_int += hexSet[rand.nextInt(1,10)];
		for (int i = 0; i < return_length - 1; i++) {
			_int += hexSet[rand.nextInt(10)];
		}
		return _int;
	}
}
